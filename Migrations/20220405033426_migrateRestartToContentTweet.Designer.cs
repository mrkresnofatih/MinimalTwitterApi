// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalTwitterApi.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MinimalTwitterApi.Migrations
{
    [DbContext(typeof(MtDbContext))]
    [Migration("20220405033426_migrateRestartToContentTweet")]
    partial class migrateRestartToContentTweet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MinimalTwitterApi.Models.Content.Content", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TweetId")
                        .HasColumnType("bigint");

                    b.HasKey("ContentId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TweetId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Content.Tweet", b =>
                {
                    b.Property<long>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("TweetId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("PlayerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Content.Content", b =>
                {
                    b.HasOne("MinimalTwitterApi.Models.Player", "Player")
                        .WithMany("Contents")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MinimalTwitterApi.Models.Content.Tweet", "Tweet")
                        .WithMany("Contents")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Content.Tweet", b =>
                {
                    b.HasOne("MinimalTwitterApi.Models.Player", "Player")
                        .WithMany("Tweets")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Content.Tweet", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("MinimalTwitterApi.Models.Player", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
